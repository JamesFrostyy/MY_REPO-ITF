# -*- coding: utf-8 -*-
"""23.04.2002 udemy notes2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A5ihXBpahf15cyk-SUubz05-PL_CLAAN
"""

#list STRİNGLERDEN EN ÖNEMLİ FARKI LİSTELER MUTABLE DIR, YENİ DEĞİŞTİRİLEBİLİR.

liste_new = ['elma', 35, "Merhaba", 3.14, 5]

#empty list
liste = []
liste2 = list()

liste2

type(liste2)

len(liste_new)

liste_new2 = list('Merhaba')
liste_new2

liste_new4 = ['asuman']
liste_new4

print(len(liste_new2))
print(len(liste_new4))

liste = [3, 4, 5, 7, 8, 9, 10]

liste[2]

liste[-1] #sondaki elemana ulaşma

liste[len(liste)-1]  #sondaki elemana ulaşma 2.metod

liste[4:]

liste[:5]

liste[::2]

liste[::-1]

liste1 = [1, 2, 3, 4, 5]
liste2 = ["asuman"]
liste3 = ['enes']
liste4 = liste1 + liste2 + liste3
liste4

liste1 * 3                                    # o anlık operasoyondur, liste 1 elemanları değişmez.

liste1

#ama yeniden atama yaparsak eski liste1 değişir.
liste1 = liste1 * 3

liste1

a = 'asuman' #str de aynı şeyi deneyelim
#gördüğümüz gibi str de anlık operasyon oluyor ve str içi değişmez.

a * 3

type(a)

a

a = a * 3

a

b = 'Asuman'  #stringler de  direkt atama ile string içerisindeki elemanı değişmez.

b[1] = "e"

c = [4, 5, 6] #listelerde direkt atama ile liste içerisindeki eleman değişir.
c[1] = 15
c

#birden fazla eleman yerine yeni elemanlar atama
liste5 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
liste5[:2]

liste5[:2] = [10, 11]   #liste5 in 2 ye kadar olan elemanlarını yeni elemanlar ile değiştirmek.
liste5

# METHOD; Python veri tiplerinin çoğunda uygulanabilen ve değişik işlemler gerçekleştiren fonksiyonlardır.
# LİSTE fonksiyonlarından bazıları
# herhangi bir listenin fonksiyonlarına ulaşmak için list. yazıp bekliyoruz colab da, jupiterde ise list yazıp tab a basıyoruz.

#APPEND METODU (LİSTENİN SONUNA ELEMAN EKLER)
liste_new = [1, 2, 3, 4, 5, 6]
liste_new.append('asuman')
liste_new

#POP METODU (LİSTENİN EN SONUNDAKİ ELEMANI ATAR)
liste_new.pop()
liste_new

liste_new.pop(0) #index numarasına göre eleman silmek istersekde index numarasını yazıyoruz.
liste_new

liste_new.pop(0) #listeden atacağı elemanı dilersek bu şekilde yazdırabiliriz.

liste_new

#SORT METODU listenin içindeki elemanları sıralamaya yarar.
liste = [34, 2, 1, 89, 120, 48, 1, 0]
liste.sort()
liste

#tersten sıralama yapmak için ise mevcut parametrenin değerini değiştirebiliriz (reverse = True) ile
liste.sort(reverse = True)
liste

# liste içeriği alpabetik olarak sıralama
liste_new2 = ['Php', 'Java', 'C', 'Java Script']
liste_new2.sort()
liste_new2

#yine aynı şekilde tersten sıralama.
liste_new2.sort(reverse = True)
liste_new2

liste = [[1], [2], [3]]
liste[1]

liste = [[1], [3], ['asuman'], ['udemy'], ["kurs"], [['her şey güzel olacak']]]
liste[5][0]

#TUPLE listelere benzer fakat elemanları değiştirilemezdir.
demet = (1, 2, 3, 4, 5,6, 7, 8, 9)
type(demet)

demet[-1]

demet[4:]

demet[::-1]

#TUPLE LARDA SADECE 2 METHOD yani 2 fonksiyon VARDIR. DEĞİŞTİRİLEMEZ OLDUĞU İÇİN FAZLA METODU YOKTUR.
# COUNT FONKSİYONU = SAYDIRMA, SAYAÇ, Verilen sayınını demet içindeki tekrar sayısına bakıyor.
# iNDEX FONKSİYONU = biz index fnk. içine herhangi bir değeri girince bu elemanın hangi index olduğunu veriyor.
#yine fonksiyonları görmek için tuple. yapıp bekliyoruz. tuple() yapıp beklersek de tuple hakkında bilgiler geliyor.

tuple2 = (1, 1, 1, 1, 2, 2, 2, 3, 4, 5, 8, 10, 12)
tuple2.count(1)

tuple2.count(25) #olmayan bir değeri saydırmasını istedğimiz zaman hata vermiyor direkt 0 yazıyor.

tuple3 = ("java", "java script", "Linuw", "Python", "CSS")
tuple3.index("CSS")

tuple3.index('asuman')   #count hata vermezken index metodu olmayan bir değer için hata veriyor.

tuple4 = (1, 2, 3, 4, 5, 6, 7, 8)  #AYNI STRİNG LERDE OLDUĞU GİBİ UMMETABLY OLDUĞU YANİ DEĞİŞTİRİLEMEZ OLD. İÇİN HATA VERİR.
tuple4[-1] = 10

# demetlerin avantajları
# değiştirilmesini istemediğiniz veriler için, read only olduğu için listelere göre daha hızlıdır.

# normal bir satırı comment satırına çevirmek için ctrl ve / kullanmalıyız.

# DİCTİONARY
# KEY - ANAHTAR 
# VALUE - DEĞER 
sözlük1 = {"bir": 1, "iki": 2, "üç": 3, "dört": 4}
type(sözlük1)

# boş sözlük oluşturmanın 2 yolu
# 1 ) dict()
# 2 ) {}

jan = mar = jul = aug = octo = dec = 31
feb = 28
april = jun = semp = novem = 30
print(jan, feb, mar, april, jun, jul, aug, semp, octo, novem, dec)

# iki tırnak arasında kalan her şey string dir. aralarında virgül olsada.

sözlük1

sözlük1["dört"]

sözlük1["beş"]  #olmayan bir eleman talep edilirse hata verir.

sözlük1["beş"] = 5 #yeni eleman ekleme.
sözlük1                         #sözlükler sıralı bir şekilde ilerlemez, sözlüklerde indexe erişemediğimiz için bunlara sadece anahtar kelimeler ile ulaşıyoruz.

a = {"bir": [1, 2, 3, 4], "iki":[[1, 2], [3, 4], [5, 6]], "üç": 15}

a["iki"][1][0]

# sözlüklere yeni değer atama
sözlük1

sözlük1["beş"] = 20
sözlük1

# sözlük değerlerini değiştirme
sözlük1["beş"]+=1
sözlük1

# iç içe sözlükler
a = {"sayılar": {"bir": 1, "iki": 2, "üç": 3}, "meyveler":{"kiraz": "yaz", "portakal": "kış", "erik": "yaz"}}
a["sayılar"]

a["sayılar"]["iki"]

a["meyveler"]["kiraz"]

#sözlüklerin temel metodları çok fazladır.
# 3 tane metod (fonk) göreceğiz

sözlük1.keys()

sözlük1.values()

sözlük1.items()

for k, v in sözlük1.items():  # sözlük1 içindeki keys ve value ları items olarak bas.
  print(k, v)

# İNPUT FONKSİYONU
input()  # çalıştırdığımız zaman kullanıcıdan bir değer ister.

int(input("Lütfen bir sayı giriniz "))

input("lütfen bir sayı giriniz ")

a = input("Lütfen bir sayı giriniz: ")
print("Kullanıcının girdiği değer", a)

# İNPUT KURALLARI
a = input("Lütfen bir sayı giriniz: ")
print(a * 3)
print(type(a))

a = int(input("Lütfen bir sayı giriniz: "))
print(a * 3)
print(type(a))

a = int(input("Birinci sayı: "))
b = int(input("İkinci sayı: "))
c = int(input("Üçüncü sayı: "))
print("Toplam", a+b+c)

try:
  a = a = int(input("a: "))
  print(a)
except ValueError:
  print("Lütfen inputu doğru formatta girin.")

isim = input("İsim: ")
print("isminiz", isim)

str(123)

a = ('clarusway', )

type(a)

type(str(a))

def f1():
  x = 100
  return x 
  x = f1() + 1
print(x)

def f1():
    x=15
    print(x)
x=12
f1()

def san(x):
    print(x+1)
x=-2
x=4
san(12)

def f1(x):
  global x
  x+=1
  print(x)
  f1(15)
print(x)

