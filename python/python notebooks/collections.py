# -*- coding: utf-8 -*-
"""Collections.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15P0JNRgHWiGi0aFgAHV-2Gftup6eQsZR
"""

# Koleksiyonlar:
print('''
  | Collection  |     | Type    | Value       |
  ---------------------------------------------
  | tuple()     | ()  | Dizi    | Değişemez   |   
  | list()      | []  | Dizi    | Değişebilir |
  | set()       | {}  | Sözlük  | Değişemez   |
  | dict()      | {}  | Sözlük  | Değişebilir |
''')

# Örnek Kullanımlar:
data = {"one":1, "two":2, "three":3}
# tuple:
var_tuple = tuple(data)
print(type(var_tuple), var_tuple)
# list:
var_list = list(data)
print(type(var_list), var_list)
# set:
var_set = set(data)
print(type(var_set), var_set)
# dict:
var_dict = dict(data)
print(type(var_dict), var_dict)

# Python Döküman:
print('\n----------------')
print('\ntuple:\n' + tuple.__doc__)
print('\n----------------')
print('\nlist:\n' + list.__doc__)
print('\n----------------')
print('\nset:\n' + set.__doc__)
print('\n----------------')
print('\ndict:\n' + dict.__doc__)
print('\n----------------')

# tuple():

data = (0, True, "Two", ["Three"]) # Farklı veri türleri kullanılabilir. Key kullanılamaz, otomatik indexlidir.

var_tuple = tuple(data) # Dönüştür
print(type(var_tuple), var_tuple)

# indexteki veri çağrılabilir:
print(var_tuple[2]) 

# Eleman -> Eklenemez, Silinemez, Değiştirilemez:
# var_tuple.insert("Four"); print(type(var_list), var_list)
# var_tuple.append("Four"); print(type(var_list), var_list)
# var_tuple.remove("Four"); print(type(var_list), var_list)
# var_tuple[1] = "Four"; print(type(var_list), var_list)

# Döngü:
for val in var_tuple:
  print(val)

# Metodlar:
# help('tuple')
for mtd in dir(tuple):
  if (mtd.find('__')<0): print('->', mtd)

# list():

data = (0, True, "Two", ["Three"]) # Farklı veri türleri kullanılabilir. Key kullanılamaz, otomatik indexlidir.

var_list = list(data) # Dönüştür
print(type(var_list), var_list)

# indexteki veri çağrılabilir:
print(var_list[2]) 

# Eleman -> Eklenebilir:
var_list.append("Four"); print(type(var_list), var_list)
# Eleman -> Silinebilir:
var_list.remove("Four"); print(type(var_list), var_list)
# Eleman -> Değiştirilebilir:
var_list[1] = "Four"; print(type(var_list), var_list)

# Döngü:
for val in var_list:
  print(val)

# Metodlar:
# help('list')
for mtd in dir(list):
  if (mtd.find('__')<0): print('->', mtd)

# set():

# Süslü parantez ile:
data = {0, True, "Two"} # (Koleksiyonlar hariç) Farklı veri türleri kullanılabilir. Key kullanılabilir.

var_set = set(data) # Dönüştür
print(type(var_set), var_set)

# keydeki value çağrılamıyor:
# print(var_set[1]) 

# Eleman -> Eklenebilir:
var_set.add(4); print(type(var_set), var_set)
# Eleman -> Silinebilir:
var_set.remove(4); print(type(var_set), var_set)
# Eleman -> Değiştirilemez:
# var_set[1] = 4; print(type(var_set), var_set)

# Döngü:
for val in var_set:
  print(val)

# Metodlar:
# help('set')
for mtd in dir(set):
  if (mtd.find('__')<0): print('->', mtd)

# dict():

# Süslü parantez ile:
data = {0: 0, 1: True, 2: "Two", 3: ["Three"]} # Farklı veri türleri kullanılabilir. Key kullanılmalıdır.

var_dict = dict(data) # Dönüştür
print(type(var_dict), var_dict)

# keydeki value çağrılabilir:
print(var_dict[1]) 

# Eleman -> Eklenebilir:
var_dict[4] = "Four"; print(type(var_dict), var_dict)
# Eleman -> Silinebilir:
del var_dict[4]; print(type(var_dict), var_dict)
# Eleman -> Değiştirilebilir:
var_dict[1] = "Four"; print(type(var_dict), var_dict)

# Döngü:
for val in var_dict:
  print(val)

# Metodlar:
# help('dict')
for mtd in dir(dict):
  if (mtd.find('__')<0): print('->', mtd)

dir(dict) -> dict() metodlarını sırala.
help(dict) -> dict() hakkında bilgi ver. (ne-nasıl-niçin)

# Comfortable Words:
# Left Chars: q, w, e, r, t, a, s, d, f, g, z, x, c, v, b
# Right Chars: y, u, i, o, p, h, j, k, l, n, m
# ---------------------------------------------------------------
chars_left, is_left, chars_right, is_right = 'qwertasdfgzxcvb', False, 'yuiophjklnm', False
check_str = input("input: ")
for c in check_str: # Her bir karakteri sorgulayalım.
  if ((not is_left) and (c in chars_left)): is_left = True # (c in chars_left) yerine -> (chars_left.find(c)>=0) kullanılabilir.
  if ((not is_right) and (c in chars_right)): is_right = True
  # if (is_left and is_right): break # Bulduysan daha fazla arama
print(is_left and is_right)

