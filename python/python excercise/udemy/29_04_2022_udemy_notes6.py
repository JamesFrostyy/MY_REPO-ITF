# -*- coding: utf-8 -*-
"""29.04.2022 udemy notes6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pb0JRNPMUTPzJrb548nZIYRpx9KfYw-u
"""

# WHİLE DÖNGÜLERİ
For döngülerinden biraz farklıdır, for döngüsü ile yapılabilen her şey while döngüsü ile de yapılabilir.
while döngüleri bir bloktan oluşur; belli bir koşul sağlandığı sürece yani sonuç True olduğu sürece bloğundaki işlemleri gerçekleştirmeye devam eder.
While döngülerinin sona ermesi için koşul durumunun bir süre sonra False olması gereklidir. Yapısı şu şekildedir;
                    while (koşul):
                      İşlem1
                      işlem2
                      işlem3
                       //
                      //         # işlem 1 den başlayıp teker teker gerçekleştirir; Döngüde yapacak bir şey kalmayınca döngü tamamen başa dönüyor. 
                                # Sonra tekrar koşulu kontrol edip işlemleri yapmaya başlıyor. 
                                # Koşul ne zaman false olacak; işlemden herhangi biri koşulu False yapacak şekilde yazılmıştır, aksi halde sonsuz döngüye girer.
  while döngülerini daha iyi anlamak için örneklere bakalım.

# Döngüde i değerlerini ekrana yazdırma.

i = 0
while (i < 10):    # i 10 dan küçük olduğu sürece işleme devam et. (KOŞUL) Döngü bitince buraya tekar dönecek 10<10 sonucu False olunca döngü bitiyor.
  print("i'nin değeri", i)
  i += 1 #  Koşulun bir süre sonra False olması için gerekli, bunu yazmazsak sonsuz döngü olur.  - UNUTMAYALIM.

  # İ koşulu 10 dan küçük olan tüm değerleri gezdikten sonra tekrar başa dönüyor; bakıyor 10<10 mu diye durum False olduğu içinde döngüyü bitiriyor.

i = 0
while (i < 20):
  print('i nin değeri', i)
  i += 5

a = 0
while (a < 4):
  print("Python öğreniyorum")
  a += 1

# FOR DÖNGÜLERİ İLE BİR LİSTE ÜZERİNDE GEZİNMEK;
liste = [1, 2, 3, 4, 5]
for i in liste:
  print(i)

# WHİLE DÖNGÜLERİNDE BİR LİSTE ÜZERİNDE İNDEX İLE GEZİNMEK;

liste = [1, 2, 3, 4, 5]
a = 0
while (a < len(liste)):
  print("ındeks:", a, "Eleman:", liste[a])
  a += 1  # burası koşulun Falsa yapmak için yazdığımız kısım, bunu unutursak koşul False olmaz ve sonsuz döngüye gireriz.

liste = [1, 2, 3, 4, 5]
index = 0
while (index < len(liste)):
  print("ındeks:", index, "Liste Eleman:", liste[index])
  index += 1  # burası koşulun Falsa yapmak için yazdığımız kısım, bunu unutursak koşul False olmaz ve sonsuz döngüye gireriz

# sonsuz döngü olayları; while döngüsü kullanılırken biraz dikkatli olmamızda fayda var.
#  Çünkü, while döngü koşulunun bir süre sonra False olması gerekecek ki döngümüz sonlanabilsin.
#  Ancak biz while döngülerinde bu durumu unutursak, döngümüz sonsuza kadar çalışacaktır. Biz buna sonsuz döngü olayı diyoruz.

FOR DÖNGÜSÜ İLE WHİLE DÖNGÜSÜ ARASINDAKİ EN ÖNEMLİ FARK; FOR DÖNGÜSÜNDE SONSUZ DÖNGÜ RİSKİMİZ YOK.
AMA WHİLE DÖNGÜSÜNDE DEĞİŞKENİ BİR ARTIRMA İŞİNİ YAPMAZSAK SONSUZ DÖNGÜYE GİRERİZ.

#Bu kodu çalıştırma :) sonsuz döngüye girersin.
i = 0
while (i < 10):
  print(i)
  # i değişkenini artırma işlemi yapmadığımız için i değişkeninin değeri sürekli 0 kalıyor. 
  # ve döngü koşulu sürekli True veriyor, bu nedenlede sonsuz döngüye girilmiş oluyor. Ama burada for döngüsü kullanılsaydı sorun olmazdı. Gezinme bitince dururdu.
  # ctrl + c ye basarak sonsuz döngü düşer.

liste = [1, 2, 3, 4, 5]
for i in liste:
  print(i<3)

# RANGE() FONKSİYONU
Pythonda ki bu hazır fonsiyon bizim verdiğimiz değerlere göre range() isimli bir yapı oluşturur. 
bu yapı listelere oldukça benzer. Bu yapı başlangıç, bitiş ve opsiyonel olarak artırma değeri alarak listelere benzeyen bir sayı dizisi oluşturur.
RANGE FONK. YAPTIKLARINI HAVADA OLUŞTURUR, PRİNT ETMEDİKÇE İÇERİĞİNİ GÖREMEYİNİZ, GİZLİ BİR ATAMA YAPAR YANİ.

range(0, 20)  # 0 dan 20 ye kadar (20 dahil değil) sayı dizinisi oluşturur. havada oluşturur, print etmedikçe içindeki göremeyiz.

print(*range(0 ,20)) #yazdırmak için başına * koymamız gerekiyor. Buradaki * işareti seperatör görevi görür ve ayırma işlemi yapar.

liste =  list(range(0, 20))  # list fonksiyonuyla listeye dönüştürebilir.
print(liste)

print(*range(5, 10))

print(range(15))  # start değeri vermediğimiz için onu 0 olarak kabul eder.

print(*range(15))  # burada * işareti koymazsak gizli atama yapar yani listeyi oluşturur fakat yazdırmaz. Üstteki örnekte olduğu gibi

for x in range(11):
    print(x, end="-")

Başlangıç ve artış miktarı
parametreleri belirtilmediği 
zaman default olarak başlangıç
değerini 0 ve artış miktarını 1
olarak kabul ederek işlem yapmaktadır.
Burada 0'dan 10'a kadar olan sayıları
for döngüsü yardımı ile yazdırdık.
Verilen tek parametre bitiş parametresidir.
Bitiş parametresi dahil değildir.

'''

for x in range(11):
    print(x, end="-")

range(0, 20)

print(*range(0, 20, 2))  # 0 dan başla 20 ye kadar olan çift sayıları yazdır.

print(*range(0, 100, 10))  #10 bölünebilenler

print(*range(20, 0)) # geriye doğru gelmez.

print(*range(20, 0, -1)) # boş bir liste verir, geriye doğru gelmez. ama step -1 yazarsan listeyi tersten yazdırırım, bu -1 farklı bir değerde olur ama - olacak

print(*range(20, 0, -5))

# RANGE FONKSİYONU NUN ÜZERİNDE FOR DÖNGÜSÜ İLE GEZİNELİM;
for sayı in range(0, 3):
  print(sayı)

for sayı in range(0, 15, 5):
  print(sayı)

for sayı in range(1, 5):
  print(" * " * sayı)

for sayı in range(0, 21, 2):
  print(" * " * sayı)

liste = [1, 2, 3] #bu liste yerine range fonksiyonunu kullanarak aynı işi daha kolay yapabiliriz.
for i in liste:
  print(i)

for i in range(1, 4):
  print(i + i)

DÖNGÜLERDE KULLANILAN BREAK VE CONTİNUE İFADELERİ;
BREAK İFADESİ
Break ifadesi döngülerde programcılar tarafından en çok kullanılan ifadedir. Anlamı şu şekildedir;
    Döngü herhangi bir yerde ve herhangi bir zamanda break ifadesiyle karşılaştığı zaman
    çalışmasını bir anda durdurur. Böylelikle döngü hiçbir koşula bağlı kalmadan sonlanmış olur.

break ifadesi SADECE VE SADECE içinde bulunduğu döngüyü sonlandırır.
Eğer iç içe döngüler bulunuyorsa ve en içteki döngüde break kullanılmışsa sadece içteki döngü sona erer, örnek verelim;

i = 0 # bu döngüyü biliyoruz.
while (i < 5):
  print('i:', i)
  i += 1

i = 0 # bu döngüyü biliyoruz.
while (i < 5):
  if (i == 3):
    break                   # i = 3 olduğu an koşul sağlanıyor ve döngü anında sona eriyor.
  print('i:', i)
  i += 1

döngü break ile bitirildikten sonra hemen while takip eden bu satıra bakıyor bir şey
bulamazsa döngüyü sonlandırıyor. buraya bakmasındaki sebep ise break içerdeki döngüyü bitirdi,
dışarıda bir koşul olsaydı onu devam ettirebilirdi.

#for döngüsüyle birlikte break kullanalım.
liste =  [1, 2, 3, 4, 5, 6, 7, 8, 9]
for i in liste:
  if (i == 5):
    break
  print('i:', i)
i = 5 olunca döngü sonlanacak. sonra bu satıra bakacak başka bir şey bulamayınca program sona erer.

while True: # while True ne demek; eğer hiçbir yerde break ifadesi kullanılmazsa sonsuz döngüye girilir. Bunu nasıl sonlandırırız?
  isim = input("İsminiz(çıkmak için q tuşuna basın.):")
  if (isim == 'q'):  # break ile tabi ki
    print('Çıkış yapılıyor...')
    break
  print("isimiz:", isim)

while True: # while True ne demek; eğer hiçbir yerde break ifadesi kullanılmazsa sonsuz döngüye girilir. Bunu nasıl sonlandırırız?
  isim = input("İsminiz(çıkmak için q tuşuna basın.):")
  if (isim == 'q'):  # break ile tabi ki
    break                                # eğer ekrana işlemin bittiğine dair bir şey yazdırmak istiyorsak, if koşulunun altına print açalım. 
                                        # if koşulunun altına print açmazsak, yani print aşağıda kalırsa; prg.break gördüğü an durur Çıkış yapılıyor... gibi bir yazıyı yazmaz.
    print('Çıkış yapılıyor...')
  print("isimiz:", isim)

# CONTİNUE İFADESİ 
continue ifadesi break e göre daha az kullanılır.
    Döngü herhangi bir yerde ve herhangi bir zamanda continue ifadesiyle karşılaştığı zaman geri kalan işlemlerini 
    yapmadan direk olarak bloğunun başına (yani koşulu kontrol etme yerine)  döner.
continue ifadesi için örneklere bakalım.

liste = [1, 2, 3, 4, 5, 6, 7, 8, 9]

for i in liste: #bunu zaten biliyoruz.
  print('i:', i)

liste = [1, 2, 3, 4, 5, 6, 7]
for i in liste: # burada continue kullanalım.
  if (i ==3 or i == 5):      # i = 1 old. i = 2 old. bu koşul sağlanmıyor ve ekrana i değerleri basılıyor. Fakat i == 3 old.koşul sağlandığı için ekarana i=3 basılmıyor.
                            # ve döngü kalanı yapma en başa tekrar git diyor. artık i = 4 old. için onu basıyor, fakat i = 5 old. koşul sağlandığı için basılmıyor
                            # ve yine en başa geri dönüyor artık  i = 6 olduğundan i=6 yı ve i = 7 ekrana yazdırıyor.
    continue                
  print('i:', i)

# continue ifadesini while döngüsünde kullanınca SONSUZ DÖNGÜ olayına yol açabilir. 
i = 0 # bu kodda sonsuz döngü durumu var. 
while (i < 10):       i< 10 dan old. sürece bastır dedik, 0 küçük bastırdı aşağıya indi değer bir arttı. yukarı çıktı 1'i bastırdı sorun yok. yine değer arttı ( i += 1)
                      i = 2 oldu. i = 2 de çalışır fakat continue ile karşılaşır ve burada i +=1 işlemini yapmayacak, yani aşağıya inemeyecek, tekrar döngünün başına gidecek.
                      i = 2 yi görünce yine continue aşağıya inmesine izin vermeyecek yine başa dönecek ve sonsuz döngüye girmiş olacak. 
  if (i == 2):       
    continue
  print(i)
  i += 1

# kodun sorunsuz hali
i = 0 
while (i < 10):
  if (i == 2):     # değer bir artıp da 3 olduktan sonra artık buraya girmez alt kısımdan devam eder, döngü.
    i += 1  # i nin sürekli 2 kalmaması için bizim burada continue dan önce bir işlem yapmamız lazım bu işlem de artırma işlemidir.
    continue
  print(i)             # i = 2 olduğunda buradaki print devreye girmez.
  i +=3

i = 1
while (i < 10):
  if (not(i == 2) and not(i == 5)):
    print(i)
  i += 1

saat = int(input("haftalık_çalışma_saatiniz:"))
ücret = int(input("saatlik ücretiniz:"))
if saat <= 40:
  maaş = saat*ücret
else:
  saat > 40
  maaş = (saat - 40)*ücret*1.5 + 40*ücret
print("haftalık maaşınız:", maaş)

"False and True and True or False and True and False or True and False or True or False or False or True and False"

