# -*- coding: utf-8 -*-
"""31 ocak lesson notes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J9sUiCOJ6PZtZ_o3rv-0C28r_5aIKwf-
"""

my_list = ['Asuman', 'Ankara', 2022]
new_list1 = list(my_list) #burada my_list i tekrar listele diyoruz, yani sonuç aynı çıkacak.
new_list2 = [my_list] #burada my_list adı verilen listeyi köşeli parantez içine al diyoruz.
print(my_list)  #1.
print(new_list1) #2.
print(new_list2) #3.

print(len(my_list))  #1.
print(len(new_list1)) #2.
print(len(new_list2)) #3. burada mevcut listi tekrar köşeli parantez al dedik. listelerin içinde str, int, tuple ve list de olabilir. yani list içinde list olur.

len([[[]]]) #içinde ne kadar köşeli parantez olursa olsun bir önemi yok. sadece en dıştaki köşeli parantezi dikkate alır.

city = ["Ankara", "Kastamonu"]  #list ler içine append() ile eleman ekleme.
city.append("Çorum")
city.append("Sinop")
print(city)

city.pop() #list ler içinden pop() ile eleman silme işlemini yapar, son eklenen elemanı siler ve operasyon sonrası sildiği elemanı print eder. içine herh3angi birşey yazılmaza sondakini siler.

city.append("Urfa", "Mardin") #elemanı tek tek ekleyebiliriz. iki ya da daha çok olmaz hata verir, eklemez.

city.append("Mardin")

city.pop(0) #eğer pop içine bir değer yazılırsa index numarasını baz alarak belirtilen indexe karşılık gelen elemanı siler.

empty_list = []
empty_list.append(6666)
empty_list.append("Asuman")
empty_list.append([0])
print(empty_list)

#append yöntemi sona ekler ama istersek .insert() yöntemi ile istediğimiz indexe eleman ekleriz.
city.insert(0, "Newyork") #her çalıştırmada bir kez daha ekler.
print(city)

city.insert(2, "London")
print(city)

#append kullanmadan insert ile sona eleman ekleme.
int_numbers = [1, 2, 3, 4]
int_numbers.insert(4, 5)
print(int_numbers)

#remove() metodu ve sort() metodu
#remove() metodunda direkt belirlenen eleman silinir.
numbers = [1, 4, 7, 9]
numbers.remove(7)
print(numbers)

yeni = [3, 5, 1, 7, 4]
yeni.sort() #sıralama yapar, numerik ya da alfabatik
print(yeni)

mix_list = ['d', 1, 'a', 7]  #string ve integer bir arada olduğu için sıralama yapamaz.
mix_list.sort()               #sıralama yapmak için farklı tip olmaması lazım, yani aynı tip olması lazım.
print(mix_list)

list_1 = ['one', 'four', 'nine']  #sıralamayı (string olduğu için) alfabetik olarak yaptı.
list_1.sort()
print(list_1)

list_1.sort(reverse=True) #normalde reverse=False şeklindedir parametre. ama reverse=True olarak değiştirdik, bu durumda sıralama tersten olacak.
print(list_1)

list_2 = ['*', '@', 'False'] #burada asci karakterlere göre sıralar yani * ın karşılığı 42 mesela. bunu da ord() fonksiyonu ile öğrenebiliriz.
list_2.sort()
print(list_2)

ord('*') #tek tek hepsine bakabiliriz. her türlü string in asli kodu vardır, integer lar kendi içinde zaten sıralanır.

list_3 = [True, False]
list_3.sort()
print(list_3)

ord('1') #sayıları da string içinde yazarsak karşılık gelen asci kod 49 dur.

list_4 = [[3], [44], [-12]] #en küçükten başlayarak sıralar.
list_4.sort()
print(list_4)

list_5 = [[1, 3], [44, -40], [-12, 1]]  #ilk elemanları baz alarak sıralama yapar, -12 < 1 < 44
#eğer ilk rakamlar aynı olsaydı ikinci rakamlarına bakılır.
list_5.sort()
print(list_5)

chr(70) #70 in denk geldiği karakter f harfi imiş.

chr(443)