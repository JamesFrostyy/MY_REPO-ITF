# -*- coding: utf-8 -*-
"""25.04.2022 udemy notes 4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UqCMs02SZfAODXsRI4C3Ejdo7cMwV8nY
"""

# BOOLEAN 
# BOOL değerlerinin sayılarla çok ciddi bir bağı vardır. burada konu sıfırdan farklı bir değer almaktır.
# bool ın sıfır (0, 0.0) dışındaki tüm değerlerde true sonucu verir.

1 == 1  True
1 == 2  False

# Eğer bir değişkenin değerini sonradan belirlemek istiyorsak; böyle durumlarda NONE değişkeni kullanılabilir.
a = None
print(a)

karşılaştırma operatörleri; 6 tanedir.
==     eşit mi                 iki değer birbirine eşitse True, diğer durumda False
!=     eşit değil mi           iki değer birbirine eşit değilse True, diğer durumda False
>      büyük mü                soldaki değer büyükse True, değilse False 
<      küçük mü                soldaki değer küçükse True, değilse False
>=     büyük eşit mi           soldaki değer sağdaki değerden büyükse veya eşitse True, değilse False
<=     küçük eşit mi           soldaki değer sağdaki değerden küçükse veya eşitse True, değilse False

mantıksal bağlaçlar; iki veya daha fazla karşılatşırma işlemini aynı koşul içinde kontrol ediyorsak kullanılabilen bağlaçlardır.
bunlar iki tanedir; or ve and.
bunun dışında birde not operatörü vardır.

AND OPERATÖRÜ; False arar, bulduğu ilk False döndürür. Eğer hepsi True ise; en sona kadar gidip  False arayacağı için hepsinin True olması durumunda en sondakinin döndürür.
OR OPERATÖRÜ;  True arar, bulduğu ilk True yu döndürür. Eğer hepsi False ise;  en sona kadar gidip True arayacağı için hepsinin False olması durumunda en sondakini döndürür.
NOT OPERATÖRÜ; Bir işlemin sonucunu True ise False, False ise True ya döndürüyor.

1<2 and 3>2

1<2 and 3<2

1<2 and "Araba"<"Zula" and 4.32>3.1 and 1>=7 and 10 == 10

1<2 and "Araba"<"Zula" and 4.32>3.1 and 1<=7 and 10 == 10

1<2 or "Araba"<"Zula" or 4.32>3.1 or 1>=7 or 10 == 10

1>2 or "Araba">"Zula" or 4.32<3.1 or 1>=7 and 10 != 10

not False

not 2 == 2

not 2 != 2

not(1<2 and "Araba"<"Zula" or 4.32>3.1 and 1<=7 or 10 == 10)

İşlem Sırası; not, and, or

False dönenler; None, [], {}, '', "", 0, 0.0      Bunların dışındaki her şey bir değer olarak değerlendirilir.

bool([])

bool({})

bool({0})  # süslü parantez içinde bir değer olduğu için True döner, tek başına 0 yazsaydık False dönerdi.

bool(0)

bool(" ")  # bu boş bir string değildir içinde bir karakter boşluk vardır, bu nedenle True döner.

# KOŞULLU DURUMLAR - İF ELSE KOŞULLU DURUMLARI
# python programları belirli bloklardan oluşur ve bu bloklar her zaman çalışmak zorunda olmaz. Bu bloklar GİRİNTİLER  sayesinde çalışır. 


a = 2  # Blok 1'e ait kod

if (a == 2):
  print(a)  #Blok 2 ye ait kod
print("Merhaba")  # Blok 1' e ait kod

Dikkat ederseniz yukarda if in bulunduğu satırdan sonraki print işlemini bir tab kadar girintili yazdık. Burada gördüğümüz gibi,
girintiler(tab) Python da bir blok oluşturmak için kullanılıyor. 
Her bloğun çalıştırılması gerekmiyor. Mesela yukarıda gördüğümüz kodda 2 print işlemi de çalıştı. Ancak kodumuzu şu şekilde yazsaydık, ilk print işlemi çalımayacaktı.

a = 2  # Blok 1'e ait kod

if (a == 3):                               # çünkü buradaki eşitlik doğru değil.
  print(a)  # Blok 2'ye ait kod
print('Merhaba')  # Blok 1 'e ait kod

KOŞULLU DURUMLAR;
İF BLOĞU;
if bloğu programımızın içinde herhangi bir yerde belli bir koşulu kontrol edeceksek kullanılar bloklardır. Yazımı şu şekildedir; 
   if (koşul):
     # if bloğu - Koşul sağlanınca (True) çalışır. Bu hizadaki her işlelm bu if bloğuna ait. 4 BOŞLUK(1 tab kadar)BIRAKARAK BAŞLANIR YANİ GİRİNTİ İLE BAŞLADI DİKKATTT
     # if bloğu - Girintiyle oluşturulur.
     YAPILACAK İŞLEMLER
if bloğu eğer koşul sağlanırsa anlamı taşır. Eğer if kalıbındaki koşul sağlanırsa (True)if bloğu çalıştırılır. Koşul sağlanmazsa (False) if bloğu çalıştırılmaz.
Aşağıdaki örneğe bakalım.

# 18 yaş kontrolü
yaş = int(input("Yaşınızı Giriniz: "))
if (yaş < 18):
  # if bloğu Girinti ile sağlanıyor. (bir tab kadar boşluk bırakılacak ya da koşuldan sonra enter a basınca gerekli olan boşluğu kendisi veriyor.)
  print("Bu mekana giremezsiniz!")

ELSE BLOĞU;
else blokları if koşulu sağlanmadığı zaman (False) çalışan bloklardır, yukarıdaki örnekte 18 yaşından büyük olanlar için yani koşulun sağlanmama durumunda
bir şey yazdırmamız gerektiği zamanlarda biz else bloğunu kullanıyoruz.
      else:
        # else bloğu - Yukarısındaki herhangi bir if bloğu (ya da elif bloğu) çalışmazsa zaman devreye girer. son koşul durumudur.
        # else bloğu girinti ile oluşturulur. 
        yapılacak işlemler; dikkat ederseniz burada else koşulunun yanına herhangi bir koşul yazmadık. Çünkü zaten else bloğunun çalışması ondan önce gelen diğer
        koşulların sağlanmamasına bağlı oluyor. 18 yaş kontrolü örneğini birde else bloğu ile deneyelim.

# 18 yaş kontrolünde 18 yaştan büyük olanlar için bir şey yazdırmak istiyorsak bu kez ELSE yi devreye sokacağız.
yaş = int(input("Yaşınızı Giriniz: "))
if (yaş < 18):
  # if bloğu Girinti ile sağlanıyor. (bir tab kadar boşluk bırakılacak ya da koşuldan sonra enter a basınca gerekli olan boşluğu kendisi veriyor.)
  print("Bu mekana giremezsiniz!")
else:
  #else bloğu - if koşulu sağlanmazsa çalışaçak, sağlanırsa eğer döngü if bloğunda bitecek.
  print('Mekana Hoşgeldiniz')

sayı = int(input('sayı:'))
if sayı < 0:   #buradaki : yazmadığımız sürece if bloğu aşağıya inmez ve kod çalışmaz, hata verir.
  print("Negatif Sayı")
else:
  print('Sıfır veya Pozitif Sayı')

sayı = int(input('sayı:'))
if sayı < 0:   #buradaki : yazmadığımız sürece if bloğu aşağıya inmez ve kod çalışmaz, hata verir.
  print("Negatif Sayı")
else:
  print('Sıfır veya Pozitif Sayı')

else:
  print('Merhaba')
  #buradaki kod hata verdi çünkü bir else bloğu kendinden önce herhangi bir koşul bloğu yok ise çalışmaz. Python da hataya yol açar.

konu dışı çalışma;
Aritmetik Söz dizimi ile Dize Biçimlendirme
1-string formatting with arithmetic syntax
2-string formatting with % operatör
3-string formatting with string.format() method  #en çok tercih ettiğimiz.
4-string formatting with 'f-string'

# KOŞULLU DURUMLAR
# İF ELİF ELSE KOŞULLU DURUMLARI
# İF ELİF ELSE BLOKLARI
Önceki konularda koşullu durumları sadece tek bir koşulu kontrol edebiliyorduk. Ancak Programlama da bir durum bir çok koşula bağlı olabilir.
Örneğin bir hesap makinesi programı yazdığımızda kullanıcının girdiği işlemlere göre koşullarımızı belirleyebiliriz. Bu tür durumlar için İF ELİF VE ELSE KALIPLARINI
kullanabiliriz.
Kullanımı şöyledir;
if koşul:
  yapılacak işlemler
elif başka bir koşul:
  yapılacak işlemler
elif başka bir koşul:
  yapılacak işlemler:
  //
  //
else:                              #zorunlu değildir ama yazılan programda hiçbir koşulun sağlanmaması durumu ile ilgili bir işlem yapmak gerekirse kullanılır.
  yapılacak işlemler

*** programlarımızda kaç tane koşulumuz var ise o kadar elif bloğu oluşturabiliriz. Ayrıca else in yazılması zorunlu değildir. 
if elif else kalıplarında, hangi koşul sağlanırsa program o bloğu çalıştırır. if elif blokları sona erer. Aşağıdaki örneğe bakalım.

# hesap makinesi oluşturma
işlem = input('İşlem giriniz:')    # direkt string şeklinde de alabiliriz.
if işlem == "1":  # burada string şeklinde kontrol ettik çünkü yukarıda veri tipi dönüştürmesi yapmadık.
  print("İşlem 1 şeçildi.")
elif işlem == "2": 
  print("İşlem 2 seçildi.")
elif işlem == "3": 
  print("İşlem 3 seçildi.")
elif işlem == "4": 
  print("İşlem 4 seçildi.")
else:
  print("Geçersiz İşlem!")

# hesap makinesi oluşturma
işlem = input('İşlem giriniz:')    # direkt string şeklinde de alabiliriz.
if işlem == "1":  # burada string şeklinde kontrol ettik çünkü yukarıda veri tipi dönüştürmesi yapmadık.
  print("İşlem 1 şeçildi.")
elif işlem == "2": 
  print("İşlem 2 seçildi.")
elif işlem == "3": 
  print("İşlem 3 seçildi.")
elif işlem == "4": 
  print("İşlem 4 seçildi.")
else:
  print("Geçersiz İşlem!")  #yukarıda ki koşulların hiçbiri True vermediği için else bloğu çalışmış oldu.
  #Burada else bloğunu kullanmak zorunda değiliz ama kullanıcının 5 değerini girmesi durumunda ekrana hiçbir şey yazdırmayacaktı.

# if bloğunu hiç girmeden yazmaya çalışsaydık aşağıdaki hatayla karşılaşırdık.
# yani ELİF VE ELSE bloklarını İF bloğu olmadan kullanamayız hata verir.
işlem = input('İşlem giriniz:')    
elif işlem == "2": 
  print("İşlem 2 seçildi.")
elif işlem == "3": 
  print("İşlem 3 seçildi.")
elif işlem == "4": 
  print("İşlem 4 seçildi.")
else:
  print("Geçersiz İşlem!")

#not hesaplama
note = float(input('Notunuzu Giriniz:'))

if note >= 90:                     #if bloklarının yanında parantez kullanmak zorunda değiliz.
  print('AA')
elif note >= 85:
  print('BA')
elif note >= 80:
  print('BB')
elif note >= 75:
  print('CB')
elif note >= 70:
  print('CC')
elif note >= 65:
  print('DC')
elif note >= 60:
  print('DD')
else:
  print('Kaldınız!')

# HİÇBİR ELİF BLOĞUNU KULLANMADAN PROGRAM YAZSAYDIK EĞER NE OLURDU?
# Elif Blokları yukarıdaki işlemin sağlanmaması durumunda devreye girerken; İF BLOKLARI yukarıdaki işlemlerin sağlanıp sağlanmamasını umursamadan; sağlansada 
# sağlanmasada çalışır.
# Bu nedenle de örnek olarak not 80 olsun. 80 e eşit ve altındakilerinde koşul sağladığı için hepsi çalışır ve sonuç verir.
# sadece 81 ve üstü çalışmaz.
# YANİ 59 A KADAR YAZILAN TÜM NOTLARI KOŞULA UYGUN OLARAK KABUL EDER.
# BU NEDENLE ELİF BLOKLARINI KULLANMAK ZORUNDAYIZ.
note = float(input('Notunuzu Giriniz:'))
if note >= 90:                     
  print('AA')
if note >= 85:
  print('BA')
if note >= 80:
  print('BB')
if note >= 75:
  print('CB')
if note >= 70:
  print('CC')
if note >= 65:
  print('DC')
if note >= 60:
  print('DD')
else:
  print('Kaldınız!')

number = float(input('Bir sayı girin: '))
if number >= 0:                                   # bu bizim ilk şartımız yani girilen değer 0 ya da 0 dan büyük olacak.
                                                  # sonra eşit ya da büyük olması durumuna bakıyoruz. eğer biz if number > 0 sayıyı 0 girince SAYI NEGATİF BİR SAYI
                                                  # Şeklinde çıktı verecekti. BU NEDENLE >= YAZDIK.
  if number == 0:
    print("Sayı 0'a eşit")
  else:
    print('Sayı bir pozitif bir sayı')
else:
  print('Sayı negaitif bir sayı')

number = float(input('Bir sayı girin: '))
if number > 0:                                   # buraya if number > 0 yazalım. yazılan sayı 0 olunca hemen else çalışacak ve hata verecek.
  if number == 0:
    print("Sayı 0'a eşit")
  else:
    print('Sayı bir pozitif bir sayı')
else:
  print('Sayı negaitif bir sayı')

# KOŞULLU DURUMLAR
# hesap_makinesi
print("""*******************************
HESAP MAKİNESİ PROGRAMI
İşlemler; 
1.Toplama işlemi
2.Çıkarma işlemi
3.Çarpma  İşlemi
4.Bölme  işlemi
***********************************""")

a =  int(input("Birinci Sayı:"))
b = int(input("İkinci Sayı:"))
işlem = input("işleminizi giriniz:")

if işlem == "1":
  print("{} ile {} in toplamı {} dir".format(a, b, a + b))
elif işlem == "2":
  print("{} ile {} in farkı {} dır".format(a, b, a - b))
elif işlem == "3":
  print("{} ile {} in çarpımı {} dır".format(a, b, a * b))
elif işlem == "4":
  print("{} ile {} in bölümü {} dür".format(a, b, a / b))
else:
  print("Geçersiz İşlem.....")

a = int(input("Bölünecek Sayıyı Girin: "))
b = int(input("Bölen Sayıyı Girin: "))
kalan = a % b
bölüm = a // b
print("Kalan:{}".format(kalan))
print("Bölüm:{}".format(bölüm))

a = int(input("Bir sayı giriniz : "))
b = int(input("Bir sayı giriniz : "))
kalan = a % b
bölüm = a // b
print("Bölme işleminden:\n\tKalan: {0}\n\tBölüm: {1}".format(kalan, bölüm))

a = int(input("Lütfen bölünecek sayıyı girin: "))
b = int(input("Lütfen bölen sayıyı girin: "))

kalan = a % b
bölüm = a // b

print("Kalan: {}, Bölüm: {}".format(kalan, bölüm))

a = int(input("bölünecek sayıyı girin :"))
b = int(input("bölecek sayıyı girin :"))
x = a % b
y = a // b
print("kalan: {}\nBölüm:{}".format(x, y))

a = int(input("bölünecek sayıyı girin :"))
b = int(input("bölecek sayıyı girin :"))
x = (a) % (b)
y = (a) // (b)
print(("kalan: {}\nBölüm:{}".format(x, y)))

while True: # while True ne demek; eğer hiçbir yerde break ifadesi kullanılmazsa sonsuz döngüye girilir. Bunu nasıl sonlandırırız?
  isim = input("İsminiz(çıkmak için q tuşuna basın.):")
  if (isim == 'q'):  # break ile tabi ki
    print('Çıkış yapılıyor...')
    break
  print("isimiz:", isim)

total = 0
while True:
  num = input("Sayı:")
  if num == 'q':
    print(total)
    break

# input ile  tanımladınız için degişkenler type strıng oluyor işlem için dönüşüm lazım

k = int(input('k sayısını giriniz:'))
n = int(input('n sayısını giriniz:'))
if k**k == n:
  print(True)
else:
  print(False)

def k_to_k (n, k):
    if k ** k == n:
        return True
    else:
        return False

warning = 'You must quit smoking!'

print(len(list(warning)))

fruits = ['apple', 'banana', 'watermelon', 'orange', 'mango', 'avocado']

fruit_list = []
fruit_list.insert(0, fruits)
print(fruit_list[0][2][7])

even_numbers = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]

print(even_numbers[4:9])

print(len([[12, 34, 56]][0])) # bu listenin 0. indeksinin eleman sayısını soruyor. 0.indeks [12,34,56]

print(len([[12, 34, 56]]))

